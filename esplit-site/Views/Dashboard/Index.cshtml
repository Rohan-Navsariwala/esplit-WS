@{
	ViewData["title"] = "Dashboard | esplit";
}

@using Common.Types;
@model DashboardViewModel;

<div class="container mt-4">

	<div class="row">

		<!-- Left: MySplits -->
		<div class="col-md-6">
			<div class="card mb-4 shadow-sm">
				<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
					<h5 class="mb-0">MySplits</h5>
					<div>
						<button class="btn btn-light btn-sm" onclick="Split.addNewSplit()">Add New Split</button>
					</div>
				</div>

				<div class="card-body" id="OwnedSplits">
					<!-- Section 2: List of created splits -->
					<!--here we loop through partial view-->
					@foreach(SplitInfo s in Model.SplitsData[0])
					{
						@await Html.PartialAsync("_SplitCard", s);
					}
				</div>
			</div>
		</div>

		<!-- Right: MyDues -->
		<div class="col-md-6">

			<!-- Section 3: Split Requests -->
			<div class="card mb-4 shadow-sm">
				<div class="card-header bg-warning text-white">
					<h5 class="mb-0">Split Requests</h5>
				</div>
				<div class="card-body" id="RequestedSplits">
					<!--here we loop through partial view-->
					@foreach (SplitInfo s in Model.SplitsData[1])
					{
						@await Html.PartialAsync("_SplitCard", s);
					}
				</div>
			</div>

			<!-- Section 4: My Due Splits -->
			<div class="card shadow-sm">
				<div class="card-header bg-danger text-white">
					<h5 class="mb-0">My Due Splits</h5>
				</div>
				<div class="card-body" id="DueSplits">
					<!--here we loop through partial view-->
					@foreach (SplitInfo s in Model.SplitsData[2])
					{
						@await Html.PartialAsync("_SplitCard", s);
					}
				</div>
			</div>

		</div>

	</div>
</div>

<div id="SplitParticipantsContainer"></div>
<div id="AddSplitContainer">
	@await Html.PartialAsync("_AddSplitModal", Model.Contacts);
</div>
